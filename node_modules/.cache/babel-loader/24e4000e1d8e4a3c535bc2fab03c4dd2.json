{"ast":null,"code":"class Cervice {\n  constructor() {\n    this._adress = 'https://pokeapi.co/api/v2/pokemon/';\n\n    this.getResource = async url => {\n      let res = await fetch(url);\n\n      if (!res.ok) {\n        throw new Error(`status: ${res.status}`);\n      }\n\n      return await res.json();\n    };\n\n    this.getAllItems = async () => {\n      const res = await this.getResource(`${this._adress}?limit=4&offset=0/`);\n      const urls = res.results.map(item => item.url);\n      const items = Promise.all(await urls.map(async url => await this.getResource(url)));\n      return (await items).map(item => this.transformItem(item));\n    };\n\n    this.transformItem = item => {\n      return 2;\n    };\n  }\n\n}\n\nexport default Cervice;","map":{"version":3,"sources":["/Users/rybina/Desktop/learn-front/learn-react/react-pr/module-2-total/my-app/src/components/cervice/Cervice.js"],"names":["Cervice","_adress","getResource","url","res","fetch","ok","Error","status","json","getAllItems","urls","results","map","item","items","Promise","all","transformItem"],"mappings":"AAAA,MAAMA,OAAN,CAAc;AAAA;AAAA,SAEVC,OAFU,GAEA,oCAFA;;AAAA,SAIVC,WAJU,GAII,MAAOC,GAAP,IAAe;AACzB,UAAIC,GAAG,GAAG,MAAMC,KAAK,CAAEF,GAAF,CAArB;;AAEA,UAAI,CAACC,GAAG,CAACE,EAAT,EAAY;AACR,cAAM,IAAIC,KAAJ,CAAW,WAAUH,GAAG,CAACI,MAAO,EAAhC,CAAN;AACH;;AAED,aAAO,MAAMJ,GAAG,CAACK,IAAJ,EAAb;AACH,KAZS;;AAAA,SAcVC,WAdU,GAcI,YAAY;AACtB,YAAMN,GAAG,GAAG,MAAM,KAAKF,WAAL,CAAkB,GAAE,KAAKD,OAAQ,oBAAjC,CAAlB;AACA,YAAMU,IAAI,GAAGP,GAAG,CAACQ,OAAJ,CAAYC,GAAZ,CAAgBC,IAAI,IAAIA,IAAI,CAACX,GAA7B,CAAb;AACA,YAAMY,KAAK,GAAGC,OAAO,CAACC,GAAR,CAAY,MAAMN,IAAI,CAACE,GAAL,CAAS,MAAOV,GAAP,IAAe,MAAM,KAAKD,WAAL,CAAiBC,GAAjB,CAA9B,CAAlB,CAAd;AACA,aAAO,CAAC,MAAMY,KAAP,EAAcF,GAAd,CAAkBC,IAAI,IAAI,KAAKI,aAAL,CAAmBJ,IAAnB,CAA1B,CAAP;AACH,KAnBS;;AAAA,SAqBVI,aArBU,GAqBOJ,IAAD,IAAU;AACtB,aAAO,CAAP;AACH,KAvBS;AAAA;;AAAA;;AA4Bd,eAAed,OAAf","sourcesContent":["class Cervice {\n\n    _adress = 'https://pokeapi.co/api/v2/pokemon/'\n\n    getResource = async (url) => {\n        let res = await fetch (url)\n\n        if (!res.ok){\n            throw new Error(`status: ${res.status}`)\n        }\n\n        return await res.json()\n    }\n\n    getAllItems = async () => {\n        const res = await this.getResource(`${this._adress}?limit=4&offset=0/`)\n        const urls = res.results.map(item => item.url)\n        const items = Promise.all(await urls.map(async (url) => await this.getResource(url)))\n        return (await items).map(item => this.transformItem(item))\n    }\n\n    transformItem = (item) => {\n        return 2\n    }\n    \n}\n\n\nexport default Cervice;"]},"metadata":{},"sourceType":"module"}